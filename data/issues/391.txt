"groups" Parameter within dex.config for the OpenShift connector to restrict logins
Hello,

I was wondering whether a feature could be implemented which allows setting the "group" parameter as well as several groups within the ArgoCD operator dex config in order to restrict the overall login to the related ArgoCD instance, by also keeping the currently dynamic "openShiftOAuth: true" setting.
I also have to mention that this can already be done by using the spec.dex.config parameter within the ArgoCD CRD manifest - _however this approach is quite static_, as writing information to spec.dex.config disables the automatic configuration that has been set via spec.dex.openShiftOAuth.

To give a specific example, I could append the following configuration to spec.dex.config within my ArgoCD CRD:

```
config: |
  connectors:
  - config:
        id: openshift
        name: OpenShift
        type: openshift
        **groups:
          - <OpenShift group name allowed to log in>**
      clientID: <argocd dex server ca>
      clientSecret: <token of argocd dex server ca>
      insecureCA: <true/false>
      issuer: https://kubernetes.default.svc
      redirectURL: <URL to redirect to>
```

But this essentially disables the usage of such configuration in its own GitOps approach, as the value of the clientSecret should be dynamic and not statically written into the config. The current dynamic implementation seems to be at exactly this place:

https://github.com/argoproj-labs/argocd-operator/blob/master/pkg/controller/argocd/util.go#L401

An example of how the configuration should be written in order to restrict access to ArgoCD can be obtained from here:

https://cloud.redhat.com/blog/openshift-authentication-integration-with-argocd (Chapter "Utilize OpenShift Groups to Restrict Access")

Please do not hesistate to correct me if I am missing something and this is already possible in some way.

Best regards!


Hi Maik, Thanks for raising issue with us.

If I can understand your request correctly, You are looking for a way to update the group policy(restrict or privilege a specific group with permissions on Argo CD). 

If that is true, you can already do it using the RBAC field in the Argo CD CR. Below is the example for reference.
```
apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: example-argocd
  labels:
    example: rbac
spec:
  rbac:
    defaultPolicy: 'role:readonly'
    policy: |
      g, system:cluster-admins, role:admin
    scopes: '[groups]'
```

You can read more about it at [RBAC options](https://argocd-operator.readthedocs.io/en/latest/reference/argocd/#rbac-options)  and [RBAC Examples](https://argocd-operator.readthedocs.io/en/latest/reference/argocd/#rbac-example)
 
 Does this help ?
Hi,

Thanks for the fast reply!

I do not want to set the RBAC policy but instead aim to only allow specific groups to login to ArgoCD at all.
This can be achieved with the groups parameter under a specific connector (as seen in my example from the initial post).
The issue is, that I can - as of now - only set this via the spec.dex.config portion of the ArgoCD operator instances manifest.
This basically disables the auto configuration of the OpenShift dex connector, which has been set by changing the value of the parameter openShiftOAuth to true.
Long story short, I am asking whether a feature can be added to the operator, which allows to directly mention user groups which should be denied from logging into a given ArgoCD instance, but also still allow the automatic configuration of the openshift dex connector.

Regards
It makes much sense now, Thanks for the detailed explanation. 

This looks like a sophisticated request :). This is what we can do currently, make any default logged in user a readonly user and allow only specific groups to perform specific actions.

```
**rbac**:
    policy: |
      g, system:cluster-admins, role:admin
      g, admins, role:admin
      g, developer, role:developer
      g, marketing, role:marketing
```
**rbac.defaultPolicy**: 'role:readonly' (This will ensure by default every logged in user is a readonly user).

The overall Argo CD CR would look something like this.
```
apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: argocd
  namespace: argocd
spec:
  server:
    route:
      enabled: true
  dex:
    image: ghcr.io/dexidp/dex
    openShiftOAuth: true
    version: v2.28.0
  rbac:
    defaultPolicy: ''
    policy: |
      g, system:cluster-admins, role:admin
      g, admins, role:admin
      g, developer, role:developer
      g, marketing, role:marketing
    scopes: '[groups]'
```

@maik-d  Can I consider your request would **only** have an additional advantage of blocking specific users/groups to log in to Argo CD over the current approach of supporting "read-only" as the least privilege for any user ?

Apart from that we can use the combination of `spec.dex.openShiftOAuth: true`,  `spec.rbac.defaultPolicy` and `spec.rbac.Policy` to achieve things.

Sorry I need to adjust my previous answer a little bit...

"Long story short, I am asking whether a feature can be added to the operator, which allows to directly mention user groups which should be _allowed (not denied)_ from logging into a given ArgoCD instance, but also still allow the automatic configuration of the openshift dex connector."

But yes, this feature would allow the specification of some groups and with that completely disable the usage of a given ArgoCD instance for other groups. I am currently using the read-only approach that you are mentioned, but a "complete lock-out" for non ArgoCD related user groups would be a great feature for the operator.
much clear :)

I haven't seen the usage of groups before in the spec.dex.config of ArgoCD CR. Can you please point me out to any documentation ?
Sure thing! :)
Unfortunately I am not able to find anything within the official ArgoCD documentation, however the parameter is mentioned and explained within the Dex docs:

https://dexidp.io/docs/connectors/openshift/#dex-configuration

```
(...)
# Optional list of required groups a user must be a member of
      groups:
        - users
```

Additionally it has been mentioned in an OpenShift blog post regarding ArgoCD:
https://cloud.redhat.com/blog/openshift-authentication-integration-with-argocd
(Chapter "Utilize OpenShift Groups to Restrict Access")

Maybe it makes sense to include it in the auto configuration of the dex connector with an optional parameter for the ArgoCD instance resource which - if specified - can be used to add/mention group names.

@maik-d , Thanks for the information. I also like the suggestion of adding this to the automated dex configuration generated by the operator when `openShiftOAuth: true`.

I will mark this as an enhancement request and a good first time for someone interested to pick :)
I worked around like this:

1. enable openShiftOAuth: `oc patch argocd/openshift-gitops -n openshift-gitops --type='merge' --patch='{ "spec": { "dex": { "openShiftOAuth": true } } }'`
2. Get the current config and extend itwith the groups you want: `oidc_config=$(oc get cm -n openshift-gitops argocd-cm -o json | jq '.data["dex.config"]' | sed 's@/callback@/callback\\n    groups:\\n      - cluster-admins@' | sed 's/"//g')`
3. Remove the automatic Setup: `oc patch argocd/openshift-gitops -n openshift-gitops --type='json' --patch='[{"op": "remove", "path": "/spec/dex/openShiftOAuth" }]'`
4. Add the extended config as manual dex config: `oc patch argocd/openshift-gitops -n openshift-gitops --type='merge' --patch="{ \"spec\": { \"dex\": { \"config\": \"${oidc_config}\" } } }"`

@maik-d  @duritong I have added this enhancement and got it merged to master. It will be available in the next release.
#431 
