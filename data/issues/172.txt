Ability to provide a custom spec for repo-server
Related  #155, making this into a new issue as the other one is labelled as a "question". 

I think it would be very useful to have the ability to provide a custom spec for repo-server (and possibly the other components) as described in the argocd docs [here](https://argoproj.github.io/argo-cd/operator-manual/custom_tools/#adding-tools-via-volume-mounts). There are certain use cases where having a custom image is not enough. For example if you need to mount secrets to allow argocd the ability to decrypt manifests, you would not want to include these into a custom image. 
As per my comment on #155, until the operator is extended to expose the spec of the repo-server, one can customize any spec generated by the operator with a [KubeMod](https://github.com/kubemod/kubemod) ModRule.
I found a simple way to work around this, albeit a bit hackish.  I created an ArgoCD job that uses strategic merge to patch in the desired secrets.  The ArgoCD operator doesn't mind those extra mountpoints and volumes.  This allowed me to automatically boot up an ArgoCD *with* a GnuPG key for SopsSecretsGenerator, which then (when it rolled out) is able to decrypt the secrets it has.

The application applies following manifest.

```
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: heal-argocd-operator
  name: argocd-repo-server
  namespace: stibodx-argo-operator
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-repo-server
  template:
    spec:
      volumes:
        - name: gpg-secring
          secret:
            secretName: gpg-private-key
            defaultMode: 220
      containers:
        - name: argocd-repo-server
          volumeMounts:
            - name: gpg-secring
              mountPath: /mnt/gpg-private-key
```

It's of course probably possible to use other types of patches; this was the first I reached for.  Ideally the secret name would include a hash (coming from kustomize), but I'd have to investigate how to pair a strategic patch like this with kustomize.

Hope this helps.
@mogsie 

Trying to understand your solution, by `ArgoCD job` you mean an ArgoCD application that applies this manifest as a patch? 
Yes.  I found that by manually adding the mountpoints to the argocd-repo-server, the operator thankfully didn't remove them.  Then I figured that I could get ArgoCD to do it, by making an `Application` that applies this.  If the operator ever decides to recreate the Deployment (e.g. because of a new image perhaps) this Application will apply the pgp keys, making them available to the other applications.
100% on this. want to follow the instrucitons in https://argoproj.github.io/argo-cd/operator-manual/custom_tools/ but have to do what @mogsie said to be able to do it when using the operator to deploy argo.
So from the handful of use cases I've seen here, this probably looks like being able to define custom mounts and initContainers for the repo server right? Being able to specify an entire custom spec seems like it could turn into quite a large ball of yarn (at least IMO).
@tylerauerbeck that would do it for us and our constitutents for sure:

priority wise if broken into two different peices of work:
1) ability to sepcify custom mounts on the repo-server
2) ability to specify custom init containers for the repo-server

Priorities this way because you can work around feature 2 with a custom container image and pass that in via the CR, but number 1 there is no work around other then hand jaming the Deployment for the repo-server and praying the operator doesn't overwrite it, or going try hard and doing what @mogsie suggested and make an argo app that is modifying argos repo-server resource in a feat of inception that would make DeCaprios head spin.

@jomkz @iam-veeramalla @wtam2018 Any objections? This one seems fairly reasonable and is a frequent conversation that I think most of us run into. Just want to get some eyes on the approach before putting any time into a PR.
@tylerauerbeck I agree it is reasonable and useful.  Thanks for looking into it.
WAHOOO!! thank you!!!
